{"version":3,"file":"index.browser.js","sources":["../src/client.ts","../src/features.ts"],"sourcesContent":["import { TypedEventTarget } from 'typescript-event-target';\nimport type {\n  StartRecognition,\n  RecognitionStarted,\n  RealtimeClientMessage,\n  RealtimeServerMessage,\n  TranscriptionConfig,\n} from '../models';\n\nexport class SocketStateChangeEvent extends Event {\n  constructor(public readonly socketState: RealtimeClient['socketState']) {\n    super('socketStateChange');\n  }\n}\n\nexport class ReceiveMessageEvent extends Event {\n  constructor(public readonly data: RealtimeServerMessage) {\n    super('receiveMessage');\n  }\n}\n\nexport class SendMessageEvent extends Event {\n  constructor(public readonly data: RealtimeClientMessage) {\n    super('sendMessage');\n  }\n}\n\nexport interface RealtimeClientEventMap {\n  sendMessage: SendMessageEvent;\n  receiveMessage: ReceiveMessageEvent;\n  socketStateChange: SocketStateChangeEvent;\n}\n\nexport type AddAudio = Parameters<WebSocket['send']>[0];\n\nexport interface RealtimeClientOptions {\n  /**\n   * URL of the Speechmatics Realtime API, see options here: https://docs.speechmatics.com/introduction/authentication#supported-endpoints\n    defaults to `wss://eu2.rt.speechmatics.com/v2`\n  */\n  url?: string;\n  /**\n   * String identifying your app to the Speechmatics API. Can be any unique ID\n   */\n  appId?: string;\n  /**\n   * Optionally enable legacy mode for the Realtime API. This opts out of incremental rescoring.\n   * Only set this if you're sure you need it.\n   */\n  enableLegacy?: boolean;\n}\nexport type RealtimeTranscriptionConfig = Omit<\n  StartRecognition,\n  'message' | 'audio_format'\n> &\n  Partial<Pick<StartRecognition, 'audio_format'>>;\n\nexport class RealtimeClient extends TypedEventTarget<RealtimeClientEventMap> {\n  constructor(config: RealtimeClientOptions = {}) {\n    super();\n    this.url = config.url ?? 'wss://eu2.rt.speechmatics.com/v2';\n    this.appId = config.appId;\n    this.enableLegacy = config.enableLegacy ?? false;\n  }\n\n  readonly url: string;\n  private readonly appId?: string;\n  private readonly enableLegacy: boolean;\n\n  private socket?: WebSocket;\n\n  get socketState() {\n    if (!this.socket) return undefined;\n    return {\n      [WebSocket.CONNECTING]: 'connecting' as const,\n      [WebSocket.OPEN]: 'open' as const,\n      [WebSocket.CLOSING]: 'closing' as const,\n      [WebSocket.CLOSED]: 'closed' as const,\n    }[this.socket.readyState];\n  }\n\n  // Track the last AudioAdded sequence number, used when stopping transcription to avoid missing audio\n  // https://docs.speechmatics.com/rt-api-ref#audioadded\n  private lastAudioAddedSeqNo = 0;\n\n  private async connect(jwt: string) {\n    return new Promise<void>((resolve, reject) => {\n      const url = new URL(this.url);\n      url.searchParams.append('jwt', jwt);\n      if (this.appId) {\n        url.searchParams.append('sm-app', this.appId);\n      }\n\n      if (this.enableLegacy) {\n        url.searchParams.append('sm-enable-legacy-rt', 'true');\n      }\n\n      this.socket = new WebSocket(url.toString());\n      this.dispatchTypedEvent(\n        'socketStateChange',\n        new SocketStateChangeEvent(this.socketState),\n      );\n\n      this.socket.addEventListener(\n        'open',\n        () => {\n          resolve();\n        },\n        { once: true },\n      );\n\n      this.socket.addEventListener('error', (error) => {\n        this.dispatchTypedEvent(\n          'socketStateChange',\n          new SocketStateChangeEvent(this.socketState),\n        );\n        // In case the above hasn't resolved, we can reject here rather than waiting\n        // If the above has resolved, this will be ignored\n        reject(error);\n      });\n\n      this.socket.addEventListener('close', () => {\n        this.dispatchTypedEvent(\n          'socketStateChange',\n          new SocketStateChangeEvent(this.socketState),\n        );\n      });\n\n      this.socket.addEventListener('message', (socketMessage) => {\n        // Turn message into one of the union type of events\n        // Pass it to this event target\n        const data = JSON.parse(socketMessage.data) as unknown;\n        if (!dataIsRealtimeTranscriptionMessage(data)) {\n          console.warn(\n            'message does not look like a valid message: ',\n            JSON.stringify(data),\n          );\n          return;\n        }\n\n        if (data.message === 'AudioAdded') {\n          this.lastAudioAddedSeqNo = data.seq_no;\n        }\n\n        this.dispatchTypedEvent(\n          'receiveMessage',\n          new ReceiveMessageEvent(data),\n        );\n      });\n    });\n  }\n\n  private sendMessage(message: RealtimeClientMessage) {\n    if (!this.socket) {\n      throw new SpeechmaticsRealtimeError('Client socket not initialized');\n    }\n    this.socket.send(JSON.stringify(message));\n    this.dispatchTypedEvent('sendMessage', new SendMessageEvent(message));\n  }\n\n  sendAudio(data: AddAudio) {\n    if (!this.socket || this.socket.readyState !== this.socket.OPEN) {\n      throw new SpeechmaticsRealtimeError('Socket not ready to receive audio');\n    }\n    this.socket.send(data);\n  }\n\n  async start(\n    jwt: string,\n    config: RealtimeTranscriptionConfig,\n  ): Promise<RecognitionStarted> {\n    await this.connect(jwt);\n\n    const waitForRecognitionStarted = new Promise<RecognitionStarted>(\n      (resolve, reject) => {\n        this.addEventListener('receiveMessage', ({ data }) => {\n          if (data.message === 'RecognitionStarted') {\n            resolve(data);\n          }\n          // If client receives an error message before starting, reject immediately\n          else if (data.message === 'Error') {\n            reject(new Error(data.type));\n          }\n        });\n\n        const startRecognitionMessage: StartRecognition = {\n          audio_format: defaultAudioFormat,\n          ...config,\n          message: 'StartRecognition' as const,\n        };\n\n        this.sendMessage(startRecognitionMessage);\n      },\n    );\n\n    return Promise.race([\n      waitForRecognitionStarted,\n      rejectAfter<RecognitionStarted>(\n        RT_CLIENT_RESPONSE_TIMEOUT_MS,\n        'RecognitionStarted',\n      ),\n    ]);\n  }\n\n  /** Sends an `\"EndOfStream\"` message, resolving if acknowledged by an `\"EndOfTranscript\"` from server, rejecting if not received */\n  async stopRecognition({ noTimeout }: { noTimeout?: true } = {}) {\n    const waitForEndOfTranscript = new Promise<void>((resolve) => {\n      this.addEventListener('receiveMessage', ({ data }) => {\n        if (data.message === 'EndOfTranscript') {\n          this.socket?.close();\n          resolve();\n        }\n      });\n\n      this.sendMessage({\n        message: 'EndOfStream',\n        last_seq_no: this.lastAudioAddedSeqNo,\n      });\n    });\n\n    if (noTimeout) {\n      return;\n    }\n\n    return Promise.race([\n      waitForEndOfTranscript,\n      rejectAfter(RT_CLIENT_RESPONSE_TIMEOUT_MS, 'EndOfTranscript'),\n    ]);\n  }\n\n  setRecognitionConfig(config: TranscriptionConfig) {\n    this.sendMessage({\n      message: 'SetRecognitionConfig' as const,\n      transcription_config: config,\n    });\n  }\n}\n\nfunction dataIsRealtimeTranscriptionMessage(\n  data: unknown,\n): data is RealtimeServerMessage {\n  if (typeof data !== 'object' || data === null) {\n    return false;\n  }\n  if (!('message' in data)) {\n    return false;\n  }\n  if (typeof data.message !== 'string') {\n    return false;\n  }\n  return true;\n}\n\nconst defaultAudioFormat = {\n  type: 'file',\n} as const;\n\nconst RT_CLIENT_RESPONSE_TIMEOUT_MS = 10_000;\n\nexport class SpeechmaticsRealtimeError extends Error {\n  constructor(message: string, options?: ErrorOptions) {\n    super(message, options);\n    this.name = 'SpeechmaticsRealtimeError';\n  }\n}\n\nfunction rejectAfter<T = unknown>(timeoutMs: number, key: string): Promise<T> {\n  return new Promise<T>((_, reject) => {\n    setTimeout(\n      () =>\n        reject(\n          new SpeechmaticsRealtimeError(\n            `Timed out after ${timeoutMs}ms waiting for ${key}`,\n          ),\n        ),\n      timeoutMs,\n    );\n  });\n}\n","export async function getFeatures(\n  region: Region = 'eu2',\n): Promise<FeatureResponse> {\n  const resp = await fetch(\n    `https://${region}.rt.speechmatics.com/v1/discovery/features`,\n  );\n\n  return resp.json();\n}\n\n// https://docs.speechmatics.com/introduction/authentication#supported-endpoints\ntype Region = 'eu2' | 'neu' | 'wus';\n\nexport interface FeatureResponse {\n  metadata: {\n    language_pack_info: Record<\n      string,\n      {\n        language_description: string;\n        locales?: Record<string, { name: string }>;\n      }\n    >;\n  };\n  realtime: {\n    transcription: [\n      {\n        version: 'latest';\n        languages: string[];\n        locales: Record<string, string[]>;\n        domains: Record<string, string[]>;\n      },\n    ];\n    translation: [\n      {\n        version: 'latest';\n        languages: Record<string, string[]>;\n      },\n    ];\n  };\n}\n"],"names":[],"mappings":"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"}